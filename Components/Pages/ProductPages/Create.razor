@page "/products/create"
@inject CRUDwithScaffoldTraining.Data.ProductContext DB
@using CRUDwithScaffoldTraining.Models
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Product</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Product" OnValidSubmit="AddProduct" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Product.Name" class="form-control" /> 
                <ValidationMessage For="() => Product.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Product.Description" class="form-control" /> 
                <ValidationMessage For="() => Product.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="maker" class="form-label">Maker:</label> 
                <InputText id="maker" @bind-Value="Product.Maker" class="form-control" /> 
                <ValidationMessage For="() => Product.Maker" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="sku" class="form-label">SKU:</label> 
                <InputText id="sku" @bind-Value="Product.SKU" class="form-control" /> 
                <ValidationMessage For="() => Product.SKU" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="qty_instock" class="form-label">Qty_InStock:</label> 
                <InputNumber id="qty_instock" @bind-Value="Product.Qty_InStock" class="form-control" /> 
                <ValidationMessage For="() => Product.Qty_InStock" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="unitprice" class="form-label">UnitPrice:</label> 
                <InputNumber id="unitprice" @bind-Value="Product.UnitPrice" class="form-control" /> 
                <ValidationMessage For="() => Product.UnitPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="unitprice_total" class="form-label">UnitPrice_Total:</label> 
                <InputNumber id="unitprice_total" @bind-Value="Product.UnitPrice_Total" class="form-control" /> 
                <ValidationMessage For="() => Product.UnitPrice_Total" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="qty_received" class="form-label">Qty_Received:</label> 
                <InputNumber id="qty_received" @bind-Value="Product.Qty_Received" class="form-control" /> 
                <ValidationMessage For="() => Product.Qty_Received" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="costprice" class="form-label">CostPrice:</label> 
                <InputNumber id="costprice" @bind-Value="Product.CostPrice" class="form-control" /> 
                <ValidationMessage For="() => Product.CostPrice" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="costprice_total" class="form-label">CostPrice_Total:</label> 
                <InputNumber id="costprice_total" @bind-Value="Product.CostPrice_Total" class="form-control" /> 
                <ValidationMessage For="() => Product.CostPrice_Total" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/products">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Product Product { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddProduct()
    {
        DB.Product.Add(Product);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }
}
