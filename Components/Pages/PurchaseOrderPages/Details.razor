@page "/purchaseorders/details"
@inject CRUDwithScaffoldTraining.Data.ProductContext DB
@using CRUDwithScaffoldTraining.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>PurchaseOrder</h4>
    <hr />
    @if (purchaseorder is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Quote</dt>
            <dd class="col-sm-10">@purchaseorder.Quote</dd>
            <dt class="col-sm-2">Invoice</dt>
            <dd class="col-sm-10">@purchaseorder.Invoice</dd>
            <dt class="col-sm-2">Supplier</dt>
            <dd class="col-sm-10">@purchaseorder.Supplier</dd>
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@purchaseorder.PhoneNumber</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@purchaseorder.Email</dd>
            <dt class="col-sm-2">SalesRep_Name</dt>
            <dd class="col-sm-10">@purchaseorder.SalesRep_Name</dd>
        </dl>
        <div>
            <a href="@($"/purchaseorders/edit?id={purchaseorder.Id}")">Edit</a> |
            <a href="@($"/purchaseorders")">Back to List</a>
        </div>
    }
</div>

@code {
    PurchaseOrder? purchaseorder;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        purchaseorder = await DB.PurchaseOrder.FirstOrDefaultAsync(m => m.Id == Id);

        if (purchaseorder is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
